Introdução

Padrões de projeto são soluções típicas para problemas comuns em projeto de software. 
Eles são como plantas de obra pré fabricadas que você pode customizar para resolver um problema de projeto recorrente em seu código.

São frequentemente confundidos com algoritmos, porque ambos os conceitos descrevem soluções típicas para alguns problemas conhecidos. 
Enquanto um algoritmo sempre define um conjunto claro de ações para atingir uma meta, um padrão é mais uma descrição de alto nível de uma solução. 
O código do mesmo padrão aplicado para dois programas distintos pode ser bem diferente.

A maioria dos padrões são descritos formalmente para que as pessoas possam reproduzi-los em diferentes contextos. 
Aqui estão algumas seções que são geralmente presentes em uma descrição de um padrão:

O Propósito do padrão descreve brevemente o problema e a solução.
A Motivação explica a fundo o problema e a solução que o padrão torna possível.
As Estruturas de classes mostram cada parte do padrão e como se relacionam.

O conceito de padrões foi primeiramente descrito por Christopher Alexander em Uma Linguagem de Padrões. 
O livro descreve uma “linguagem” para o projeto de um ambiente urbano. As unidades dessa linguagem são os padrões. 
Eles podem descrever quão alto as janelas devem estar, quantos andares um prédio deve ter, quão largas as áreas verdes de um bairro devem ser, e assim em diante.

A ideia foi seguida por quatro autores: Erich Gamma, John Vlissides, Ralph Johnson, e Richard Helm. 
Em 1994, eles publicaram Padrões de Projeto — Soluções Reutilizáveis de Software Orientado a Objetos, 
no qual eles aplicaram o conceito de padrões de projeto para programação. 
O livro mostrava 23 padrões que resolviam vários problemas de projeto orientado a objetos e se tornou um best-seller rapidamente.
Devido a seu longo título, as pessoas começaram a chamá-lo simplesmente de “o livro da Gangue dos Quatro (Gang of Four)” que logo foi simplificado para o “livro GoF”.

Todos os padrões podem ser categorizados por seu propósito, ou intenção. Esse livro trata de três grupos principais de padrões:

Os padrões criacionais fornecem mecanismos de criação de objetos que aumentam a flexibilidade e a reutilização de código.

Os padrões estruturais explicam como montar objetos e classes em estruturas maiores, enquanto ainda mantém as estruturas flexíveis e eficientes.

Os padrões comportamentais cuidam da comunicação eficiente e da assinalação de responsabilidades entre objetos.

Metodo escolhido foi o : Factory Method

O Factory Method, também conhecido como construtor virtual, possibilita adiar a criação do objeto a subclasses.

Esse padrão é comumente utilizado pelos projetistas de software quando existe a necessidade de encapsular a criação de uma classe 
se isolando do conhecimento da classe concreta da aplicação cliente através de uma interface. 
Essa necessidade é comumente desejada por aqueles que trabalham no desenvolvimento de frameworks, 
que utilizam classes abstratas para definir e manter relacionamentos entre os objetos. 
Dessa forma os clientes implementam as funcionalidades esperadas pelo framework adicionando a lógica de negócio específica da aplicação, 
sem que o framework tenha o conhecimento de como e qual a lógica implementada pela aplicação para complementá-lo.

A utilização do padrão Factory Method pode estar condicionada quando:

Uma classe não pode antecipar a classe/tipo de objetos que devem criar;
Uma classe especifique que suas subclasses tenham o conhecimento dos objetos que criam;
Classes que delegam responsabilidade para uma dentre várias subclasses auxiliares, 
e você quer obter o conhecimento de qual subclasse auxiliar que é a delegada.

Os participantes são:

Product - define a interface de objetos que deverá ser criado pelo método fábrica;
ConcreteProduct – implementação da interface Product;
Creator – declara o método fábrica o qual retorna um objeto do tipoProduct;
ConcreteCreator – redefine(override) o método fábrica que retorna uma instância concreta da interfaceProduct.
O padrão Factory Method elimina a necessidade de anexar classes específicas das aplicações no código. O código lida somente com a interface de Product; portanto ele pode trabalhar com qualquer implementação da classe que implementa Product, definida pelo usuário.

Fontes: 
https://refactoring.guru/pt-br/design-patterns. Acessado em 31/07/2022
https://www.devmedia.com.br/conheca-os-padroes-de-projeto/957. Acessado em 31/07/2022